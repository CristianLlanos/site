{
  "title": "SRP: El principio de una sola responsabilidad",
  "date": "2021-02-14T17:27:29.784Z",
  "description": "¿Cómo aplicar el Single Responsibility Principle? Desarrollaremos algunos consejos para aplicar este gran principio en nuestro código",
  "body": "## ¿Qué es SRP?\n\nHay muchas definiciones sobre este principio. La que más me gusta es:\n\n> Una entidad de software debe tener una sola razón para cambiar\n\n[Este principio](http://blog.cleancoder.com/uncle-bob/2014/05/08/SingleReponsibilityPrinciple.html) fue recopilado y documentado por Robert C. Martin junto a otros 4 con la finalidad de promover un \"código limpio\" al que haré referencia como *código mantenible* de aquí en adelante.\n\nEso es en cuando a la definición. No es muy detallada, ¿verdad?\n\nLo más interesante para mí ha sido entender cómo identificar que mi código está alejándose de este principio. Y hasta ahora lo he relacionado mucho con los conceptos de **cohesión** y **acoplamiento**\n\n> Cohesión: el nivel de relación del código dentro un un módulo\n>\n> Acoplamiento: el nivel de relación entre módulos\n\nEs conocido que, para producir un código mantenible, debemos aumentar la cohesión y disminuir el acoplamiento de nuestras entidades de software. Bajo esta idea, podríamos decir que un código altamente cohesionado es aquél que tiene una sola razón de cambio. Cuando nos acoplamos a alguna dependencia más de lo que es necesario, nuestra razón de cambio será ampliada y eso no es lo que queremos.\n\n## Ejemplos\n\nBueno, la teoría hace que todo parezca simple, así que mejor veamos algunos casos en los que se puede identificar que el código no está siguiendo el principio de una sola responsabilidad.\n\n```javascript\nimport * as React from 'react';\nimport './App.css';\nimport Hello from './components/Hello';\n\nconst logo = require('./logo.svg');\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <h2>Welcome to React</h2>\n      </div>\n      <p className=\"App-intro\">\n        To get started, edit <code>src/App.tsx</code> and save to reload.\n      </p>\n      <Hello name=\"TypeScript\" />\n    </div>\n  );\n}\n\nexport default App;\n```"
}